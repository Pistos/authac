## Ramaze AuthAC Part ##

Version 0.5.0
2007-03-09

### Installation ###

0. Dependencies:
   kansas 0.3.1  http://rubyforge.org/projects/kansas
1. Copy conf/auth-ac.conf.sample to conf/auth-ac.conf.
2. Edit conf/auth-ac.conf appropriately for your database and settings needs.
3. Ensure the appropriate tables are in your database.  sql/tables.sql
   can be run so as to have the minimum table structure needed.
4. In your Ramaze application's main.rb: require 'part/auth-ac/auth-ac'
   Be sure to require the auth-ac part *after* setting and loading Ramaze
   configuration.  This allows the part to set its controller mapping
   properly.


### Demo ###

To see AuthAC in action with example code, follow the above Installation
directions, and then:

1. Run sample-data.sql on your database.
2. Browse /auth/register .  For a development environment, this might be something
   like: http://localhost:7000/auth/register
3. Login with user/pass manveru/foobar for a user that doesn't have access to the
   restricted area.  User/pass Pistos/admin can access the restricted area.
4. Controller actions:
    /auth/register
    /auth/login
    /auth/logout
    /auth/home           # unrestricted example page
    /access/restricted   # example page with access restrictions
    /access/denied

### Customization ###

The material in template/ and src/controller/ are only examples.  Use them as
a base to create your own custom templates and controllers.  The controller
examples show how to use the helper methods to do authentication and access
control.

Use sql/tables.sql as a base for the minimum schema.  The users.realname field is
an example of metadata.  It does not have bearing on either authentication or
access control.  Add any additional metadata to the users table as per your
needs.
